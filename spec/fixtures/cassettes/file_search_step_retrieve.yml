---
http_interactions:
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_i22xHkDsr88wruHZONdS5GYu/runs/run_o88o29ivUdwnxMEibhuwSfsT/steps?order=asc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 13:57:27 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_6344fd448ff55ddb735722928f8e39d0
      Openai-Processing-Ms:
      - '116'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=Tik1AP7HAE2cxdySQY21effe1scn2BzSUygr78QykTo-1728655047-1.0.1.1-9sjbLaKtSlhi2AQ3lMwB6UVswCpMhdlBs7UqSce.J_yp53g31113HqAovsohFvkOKRRviK3AksJDExY31RepZg;
        path=/; expires=Fri, 11-Oct-24 14:27:27 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=pPDFPZRE3BBQ2VDAKEJxaja0XmgBBlZesnhSLPJitsc-1728655047594-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f5bfdbec6637f-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        {
          "object": "list",
          "data": [],
          "first_id": null,
          "last_id": null,
          "has_more": false
        }
  recorded_at: Fri, 11 Oct 2024 13:57:27 GMT
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_i22xHkDsr88wruHZONdS5GYu/runs/run_o88o29ivUdwnxMEibhuwSfsT/steps?order=asc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 13:57:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_b512a5516a489878e0f869b5f2196aee
      Openai-Processing-Ms:
      - '423'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=p16jquNT9_nGMgXWeeG7lnxLCKWjN7jJGJw77Bklq.U-1728655048-1.0.1.1-VTS5epjOWmL6EJAmqG3XX5ncHtB3UrhZaYcV_EtB3G_.LpxRD723K7_BNV.Kj9sW7LAdaOO7rMRoyFGQPkTanQ;
        path=/; expires=Fri, 11-Oct-24 14:27:28 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=97.xBK_dNztPXxAwNnI8kyxhkors.oGIAwhajpcTVvg-1728655048811-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f5c037fc1718c-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        {
          "object": "list",
          "data": [
            {
              "id": "step_2w6GAqcNIcq3q53mgB2OjdOR",
              "object": "thread.run.step",
              "created_at": 1728655047,
              "run_id": "run_o88o29ivUdwnxMEibhuwSfsT",
              "assistant_id": "asst_HKdf58KPyocAGLc4lc5iLvl7",
              "thread_id": "thread_i22xHkDsr88wruHZONdS5GYu",
              "type": "tool_calls",
              "status": "in_progress",
              "cancelled_at": null,
              "completed_at": null,
              "expires_at": 1728655646,
              "failed_at": null,
              "last_error": null,
              "step_details": {
                "type": "tool_calls",
                "tool_calls": [
                  {
                    "id": "call_SWMgYyYtgPFNrcpBGjhEKUzb",
                    "type": "file_search",
                    "file_search": {
                      "ranking_options": {
                        "ranker": "default_2024_08_21",
                        "score_threshold": 0.0
                      },
                      "results": [
                        {
                          "file_id": "file-XvcMoKvis7CvQUSTEtNw31LB",
                          "file_name": "somatosensory.pdf",
                          "score": 0.7469957505682571
                        },
                        {
                          "file_id": "file-XvcMoKvis7CvQUSTEtNw31LB",
                          "file_name": "somatosensory.pdf",
                          "score": 0.7360380564447965
                        },
                        {
                          "file_id": "file-XvcMoKvis7CvQUSTEtNw31LB",
                          "file_name": "somatosensory.pdf",
                          "score": 0.4608086372888856
                        },
                        {
                          "file_id": "file-XvcMoKvis7CvQUSTEtNw31LB",
                          "file_name": "somatosensory.pdf",
                          "score": 0.4448594852966387
                        }
                      ]
                    }
                  }
                ]
              },
              "usage": null
            }
          ],
          "first_id": "step_2w6GAqcNIcq3q53mgB2OjdOR",
          "last_id": "step_2w6GAqcNIcq3q53mgB2OjdOR",
          "has_more": false
        }
  recorded_at: Fri, 11 Oct 2024 13:57:28 GMT
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_i22xHkDsr88wruHZONdS5GYu/runs/run_o88o29ivUdwnxMEibhuwSfsT/steps/step_2w6GAqcNIcq3q53mgB2OjdOR?include%5B%5D=step_details.tool_calls%5B*%5D.file_search.results%5B*%5D.content
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 13:57:29 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_91acc199effc9b4ef692d8377a6f4eee
      Openai-Processing-Ms:
      - '118'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=_vQ_xEQbjJ_iO9y4N0YLHI5yf4ys3Zi6UelcRaCoClw-1728655049-1.0.1.1-0K.bVr87_cCPT56npbz8uS9_Y5WeWGRAcdf.BEVpIkQUuNmo5pWAgjwwvsUymbs52u9wwhohqA3C0BnAKBlpZw;
        path=/; expires=Fri, 11-Oct-24 14:27:29 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=UpXmo9acNvLZ5QTMMZe94u8bHTJRYcDP.9IsA1n3Yt8-1728655049637-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f5c0aaf3ccd92-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 11 Oct 2024 13:57:29 GMT
recorded_with: VCR 6.1.0
